<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://sweetfood-dev.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sweetfood-dev.github.io/" rel="alternate" type="text/html" /><updated>2021-02-10T12:46:07+09:00</updated><id>https://sweetfood-dev.github.io/feed.xml</id><title type="html">공부 그리고 기록</title><subtitle>Swift / Algorithm</subtitle><author><name>권지수</name><email>kjsii123@naver.com</email></author><entry><title type="html">MVC 패턴</title><link href="https://sweetfood-dev.github.io/ios/2-MVC/" rel="alternate" type="text/html" title="MVC 패턴" /><published>2021-02-10T00:00:00+09:00</published><updated>2021-02-10T00:00:00+09:00</updated><id>https://sweetfood-dev.github.io/ios/2-MVC</id><content type="html" xml:base="https://sweetfood-dev.github.io/ios/2-MVC/">&lt;p&gt;Apple의 MVC를 학습하기전에 전통적인 MVC에 대해 알아보자!&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/Posts/iOS/tranditional_mvc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그림을 보면 MVC가 모두 밀접하게 연관되어 있다&lt;br /&gt;
이는 곧 재사용성이 떨어짐을 의미한다&lt;br /&gt;
그만 알아보자&lt;br /&gt;
&lt;strong&gt;전통적인 MVC는 iOS에 적합해 보이지 않는다!&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Apple이 권고하는 MVC에 대해 알아보자.&lt;br /&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/Posts/iOS/cocoa_mvc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그림에서 볼 수 있듯 Controller는 중간에서 Model과 View를 이어준다&lt;br /&gt;
Model – View는 서로 알 필요가 없다&lt;br /&gt;
Controller는 여전히 재사용이 어려워 보인다&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;한계&lt;/strong&gt;&lt;br /&gt;
위의 그림과 대조적이게 실제로 Cocoa MVC는 다음 그림과 같다&lt;br /&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/Posts/iOS/real_cocoa_mvc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;왜 위와 같이 구성될까?&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Controller는 View를 가지고 있다.(그래서 이름도 ViewController다)&lt;/li&gt;
  &lt;li&gt;따라서 View의 생명 주기와 Controller의 분리가 사실상 어렵다&lt;/li&gt;
  &lt;li&gt;이렇게 View를 가지고 있고, 그 생명주기도 관리하기 때문에 Controller자체가 거대해진다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;좋은 아키텍쳐 특징에서 바라보기&lt;/strong&gt;&lt;br /&gt;
좋은 아키텍처의 특징, 요소 측면에서 이 패턴을 파악해보자!&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;책임 분리
    &lt;ul&gt;
      &lt;li&gt;View와 Controller의 관계가 매우 밀접하여 , 책임분리가 안된다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;테스트
    &lt;ul&gt;
      &lt;li&gt;View와 Controller의 밀접한 관계로 인해 사실상 Model만 테스트가 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용 용이성
    &lt;ul&gt;
      &lt;li&gt;코드길이는 적고, 진입장벽 자체는 낮다!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;정리&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;개발속도가 빠르기에 아키텍처에 투자할 시간이 부족할 때 사용하면 유용하다&lt;/li&gt;
  &lt;li&gt;유지보수 비용이 많이 들어가는 편이다&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;MVC가 개발속도는 짱이다! 그러나 유지보수 비용은 많이 들어간다!&lt;/strong&gt;&lt;/p&gt;</content><author><name>권지수</name><email>kjsii123@naver.com</email></author><category term="iOS" /><summary type="html">Apple의 MVC를 학습하기전에 전통적인 MVC에 대해 알아보자!</summary></entry><entry><title type="html">아키텍처</title><link href="https://sweetfood-dev.github.io/ios/1-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/" rel="alternate" type="text/html" title="아키텍처" /><published>2021-02-10T00:00:00+09:00</published><updated>2021-02-10T00:00:00+09:00</updated><id>https://sweetfood-dev.github.io/ios/1-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98</id><content type="html" xml:base="https://sweetfood-dev.github.io/ios/1-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/">&lt;p&gt;&lt;strong&gt;왜 아키텍처를 사용해야하지?&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;개발을 하다보면 디버깅을 해야하는 상황이 필연적으로 찾아온다&lt;br /&gt;
이 때 프로젝트의 몸집이 크다면 디버깅을 하는데 있어 어려움을 겪게 될 것이다&lt;br /&gt;
구조적으로 잘 정의된 프로젝트는 디버깅을 쉽게 해주며, 개발자간의 의사소통, 유지보수에도 도움이 된다!&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;좋은 아키텍쳐의 특징
    &lt;ul&gt;
      &lt;li&gt;객체간 &lt;strong&gt;책임 분리&lt;/strong&gt;가 균형있게 잡혀 있고 명확하게 이루어저야 한다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;테스트&lt;/strong&gt;가 용이해야 한다&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;사용이 용이&lt;/strong&gt;해야 한다. 즉 유지 보수가 쉬워야 한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;책임 분리는 왜 이루어 저야 할까?&lt;br /&gt;
로직을 쉽게, 단순하게 한눈에 볼 수 있다&lt;br /&gt;
즉, 복잡함을 극복하는 방법은 &lt;strong&gt;단일책임 원칙&lt;/strong&gt;으로 책임을 나누는 것이다!&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;왜 테스트가 가능해야 할까?&lt;br /&gt;
런타임 내에서 이슈를 찾는것을 도와준다&lt;br /&gt;
실사용자가 이슈를 접한다면 그 이슈를 수정하는데 오랜 시간이 걸리니까, 미연에 방지해야한다!&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;사용의 용이&lt;br /&gt;
단순하다. &lt;strong&gt;유지보수&lt;/strong&gt;가 용이하니까!&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;어떤 아키텍쳐들이 있는데?&lt;/strong&gt;&lt;br /&gt;
기본적으로 많이 접해본 mvc, mvp, mvvm, viper가 있고 이러한 아키텍쳐는 &lt;br /&gt;
3가지 카테고리(요소)를 포함한다&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;요소&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Model&lt;/td&gt;
      &lt;td&gt;데이터, 데이터 접근자&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;View&lt;/td&gt;
      &lt;td&gt;화면에 표시되는 UI적인 요소&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Controller,Presentor,ViewModel&lt;/td&gt;
      &lt;td&gt;model과 View를 붙여준다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;View의 액션을 처리하여 Model을 변경하거나&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Model이 변경되었을 때 View를 갱신하는 책임을 가진다&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;이러한 구성을 통해 이해가 용이, 재사용이 가능, 독립적으로 테스트가 가능한 이점을 얻을 수 있다!&lt;br /&gt;
다음 포스트를 통해 mvc 부터 차근차근 알아보자!&lt;/p&gt;</content><author><name>권지수</name><email>kjsii123@naver.com</email></author><category term="iOS" /><summary type="html">왜 아키텍처를 사용해야하지?</summary></entry><entry><title type="html">GCD</title><link href="https://sweetfood-dev.github.io/ios/4-GCD/" rel="alternate" type="text/html" title="GCD" /><published>2021-02-05T00:00:00+09:00</published><updated>2021-02-05T00:00:00+09:00</updated><id>https://sweetfood-dev.github.io/ios/4-GCD</id><content type="html" xml:base="https://sweetfood-dev.github.io/ios/4-GCD/">&lt;p&gt;&lt;strong&gt;GCD란&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Apple에서 제공하는 멀티쓰레드 처리 API&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
DisPatchQueue가 GCD에 존재합니다&lt;br /&gt;
DisPatchQueue는 메인스레드 / 백그라운드 스레드에서 작업실행을 관리하는 객체입니다&lt;br /&gt;
순차적으로 실행하는 Main Queue와 동시에 실행하는 Global Queue를 포함하고 있습니다&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Main Queue
    &lt;ul&gt;
      &lt;li&gt;보통 UI관련된 처리를 담당하고 앱이 실행 되었을 때 자동으로 실행됩니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Gloabal Queue
    &lt;ul&gt;
      &lt;li&gt;백그라운드에서 동작하고&lt;/li&gt;
      &lt;li&gt;동시에 작업을 수행합니다.&lt;/li&gt;
      &lt;li&gt;메인큐 작업에 영향을 주면 안되는 작업을 처리할 때 사용하며&lt;/li&gt;
      &lt;li&gt;QoS를 통해 작업의 우선순위를 부여할 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>권지수</name><email>kjsii123@naver.com</email></author><category term="iOS" /><summary type="html">GCD란 Apple에서 제공하는 멀티쓰레드 처리 API</summary></entry><entry><title type="html">Application 생명 주기</title><link href="https://sweetfood-dev.github.io/ios/3-App-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0/" rel="alternate" type="text/html" title="Application 생명 주기" /><published>2021-02-05T00:00:00+09:00</published><updated>2021-02-05T00:00:00+09:00</updated><id>https://sweetfood-dev.github.io/ios/3-App-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0</id><content type="html" xml:base="https://sweetfood-dev.github.io/ios/3-App-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0/">&lt;p&gt;&lt;strong&gt;App 생명주기란&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;앱의 실행부터 종료까지의 주기를 말하며, 앱이 foreground나 background에 있을 때 시스템 알림에 응답하고 기타 중요한 시스템 관련 이벤트를 처리하는 단계들을 말한다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;앱 실행시 &lt;br /&gt;
UIAppliation 객체를 생성한다.&lt;br /&gt;
이후 UIApplication 어노테이션이 있는 객체를 찾아 AppDelegate를 생성한다.&lt;br /&gt;
Main Run Loop ( Main Event Loop)를 실행하고&lt;br /&gt;
Main Run Loop는 발생한 이벤트를 큐에 담아놓고&lt;br /&gt;
담겨 있는 이벤트를 꺼내 하나하나 실행하여 처리한다&lt;br /&gt;
AppDelegate 객체는 Life Cycle을 전달 받기 때문에 이를 통하여 현재 상태를 알 수 있다&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Life Cycle&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Not Running
    &lt;ul&gt;
      &lt;li&gt;아무 것도 하지 않는 상태 혹은, 실행 중이나 시스템에 의해 종료된 상태&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;In-Active
    &lt;ul&gt;
      &lt;li&gt;상태 전환 과정에서 잠시 머무르는 상태&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Active
    &lt;ul&gt;
      &lt;li&gt;실제 앱이 실행 되는 상태( 이벤트를 받는 단계 )&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BackGround
    &lt;ul&gt;
      &lt;li&gt;Suspend 진입 전에 거치는 단계&lt;/li&gt;
      &lt;li&gt;데이터의 저장등의 작업을 처리한다&lt;/li&gt;
      &lt;li&gt;일반적인 앱은 잠시 머물고 바로 Suspend상태로 진입하지만&lt;/li&gt;
      &lt;li&gt;음악, 통화, 녹음등의 앱은 이 상태에서도 동작한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Suspend
    &lt;ul&gt;
      &lt;li&gt;BackGround 상태지만 아무 실행도 하지 않는 상태, Not Running 상태와 같다&lt;/li&gt;
      &lt;li&gt;시스템이 임의로 BackGround상태를 Suspend로 만든다 ( 리소스 해제 )&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>권지수</name><email>kjsii123@naver.com</email></author><category term="iOS" /><summary type="html">App 생명주기란 앱의 실행부터 종료까지의 주기를 말하며, 앱이 foreground나 background에 있을 때 시스템 알림에 응답하고 기타 중요한 시스템 관련 이벤트를 처리하는 단계들을 말한다.</summary></entry><entry><title type="html">UICollectionViewDataSourcePrefetching</title><link href="https://sweetfood-dev.github.io/ios/2-UICollectionViewDataSourcePrefetching/" rel="alternate" type="text/html" title="UICollectionViewDataSourcePrefetching" /><published>2021-02-05T00:00:00+09:00</published><updated>2021-02-05T00:00:00+09:00</updated><id>https://sweetfood-dev.github.io/ios/2-UICollectionViewDataSourcePrefetching</id><content type="html" xml:base="https://sweetfood-dev.github.io/ios/2-UICollectionViewDataSourcePrefetching/">&lt;p&gt;UITableView/UICollectionView 에서 Pagenation을 위해 보통 아래 방법을 사용했다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if indexPath.row == myItemList.count - 1 {
            fetchNextPage()
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
보여지는 Cell을 기준으로 List 의 마지막 아이템을 부르기 전에 다음 리스트 호출을 하는 식이다.&lt;br /&gt;
하지만 이번에 과제를 하면서 너무 버벅여 다른 방법을 찾아봤는데, UICollectionViewDataSourcePrefetching 프로토콜이 존재하였다&lt;br /&gt;
‘willDisplay’ 이 실제 보여지는 Cell을 기준으로 한다면 prefetchDataSource 는 이 작업을 백그라운드로 옮겨와 처리하는 것이다.&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension ViewController: UICollectionViewDataSourcePrefetching {
    func collectionView(_ collectionView: UICollectionView, prefetchItemsAt indexPaths: [IndexPath]) {
		//내용 
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 수정 후 눈에 띄게 속도가 향상되었다!!!&lt;/p&gt;</content><author><name>권지수</name><email>kjsii123@naver.com</email></author><category term="iOS" /><summary type="html">UITableView/UICollectionView 에서 Pagenation을 위해 보통 아래 방법을 사용했다.</summary></entry><entry><title type="html">CollectionViewLayout</title><link href="https://sweetfood-dev.github.io/ios/1-custom-layout/" rel="alternate" type="text/html" title="CollectionViewLayout" /><published>2021-02-05T00:00:00+09:00</published><updated>2021-02-05T00:00:00+09:00</updated><id>https://sweetfood-dev.github.io/ios/1-custom-layout</id><content type="html" xml:base="https://sweetfood-dev.github.io/ios/1-custom-layout/">&lt;p&gt;일반적인 collectionview의 delegate와 datasource는&lt;br /&gt;
화면에 셀을 표시하는 역할을 담당합니다&lt;br /&gt;
표시 할 때 구성과 같은 layout은 UICollectionViewLayout을 구현하여 처리해야합니다&lt;br /&gt;
&lt;br /&gt;
커스텀 CollectionViewLayout의 &lt;strong&gt;주 역할&lt;/strong&gt;은 UICollectionView에서 요청하는 레이아웃 관련 정보를 제공하는 것입니다.&lt;br /&gt;
레이아웃을 미리 준비해 놓았다가 UICollectionView에서 요청하면 준비한 레이아웃 정보를 제공합니다.&lt;br /&gt;
이 때 몇가지 필수 메소드들이 존재합니다&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;prepare()&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;UICollectionView에 표시되는 전체 크기를 계산하고 각 셀의 레이아웃 속성, collectionView의 크기와 cell의 위치를 미리 계산(캐싱)하여 메모리에 적재한 뒤 유지합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;collectionViewContentSize&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;collectionView의 전체 높이와 너비를 반환합니다.&lt;/li&gt;
      &lt;li&gt;화면에 보이는 contents 뿐만 아니라 collectionView의 전체를 반환해야 합니다.&lt;/li&gt;
      &lt;li&gt;collectionView는 이 정보를 활용하여 내부적으로 scrollView의 크기를 구성합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;layoutAttributesForElements (in :)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;in의 범위 안에 있는 모든 셀들의 레이아웃 속성들을 배열에 담아 반환합니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;layoutAttributesForItem (at :)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;at으로 들어온 cell의 레이아웃 속성을 반환합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;호출 순서&lt;/strong&gt;&lt;br /&gt;
Layout prepare() : 전체 크기, 셀의 위치를 미리 계산&lt;br /&gt;
collectionView numberOfItemsInSection : 아이템의 전체 개수&lt;br /&gt;
Layout collectionViewContentSize : collectionView의 전체 크기(너비, 높이)&lt;br /&gt;
Layout layoutAttributesForElements : 범위 안에 있는 모든 셀들의 레이아웃 속성&lt;br /&gt;
Layout collectionViewContentSize :  collectionView의 전체 크기(너비, 높이)&lt;br /&gt;
collectionView cellForItemAt : cell 표시&lt;br /&gt;&lt;/p&gt;</content><author><name>권지수</name><email>kjsii123@naver.com</email></author><category term="iOS" /><summary type="html">일반적인 collectionview의 delegate와 datasource는 화면에 셀을 표시하는 역할을 담당합니다 표시 할 때 구성과 같은 layout은 UICollectionViewLayout을 구현하여 처리해야합니다 커스텀 CollectionViewLayout의 주 역할은 UICollectionView에서 요청하는 레이아웃 관련 정보를 제공하는 것입니다. 레이아웃을 미리 준비해 놓았다가 UICollectionView에서 요청하면 준비한 레이아웃 정보를 제공합니다. 이 때 몇가지 필수 메소드들이 존재합니다 prepare() UICollectionView에 표시되는 전체 크기를 계산하고 각 셀의 레이아웃 속성, collectionView의 크기와 cell의 위치를 미리 계산(캐싱)하여 메모리에 적재한 뒤 유지합니다. collectionViewContentSize collectionView의 전체 높이와 너비를 반환합니다. 화면에 보이는 contents 뿐만 아니라 collectionView의 전체를 반환해야 합니다. collectionView는 이 정보를 활용하여 내부적으로 scrollView의 크기를 구성합니다. layoutAttributesForElements (in :) in의 범위 안에 있는 모든 셀들의 레이아웃 속성들을 배열에 담아 반환합니다 layoutAttributesForItem (at :) at으로 들어온 cell의 레이아웃 속성을 반환합니다.</summary></entry><entry><title type="html">Lazy</title><link href="https://sweetfood-dev.github.io/swift/5-Lazy/" rel="alternate" type="text/html" title="Lazy" /><published>2021-02-05T00:00:00+09:00</published><updated>2021-02-05T00:00:00+09:00</updated><id>https://sweetfood-dev.github.io/swift/5-Lazy</id><content type="html" xml:base="https://sweetfood-dev.github.io/swift/5-Lazy/">&lt;p&gt;&lt;strong&gt;Lazy란&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;처음 사용되기전까지 연산이 되지 않습니다.&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;고려 사항&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;항상 var 키워드와 함께 사용
    &lt;ul&gt;
      &lt;li&gt;처음에는 아무 값이 없고 추후 사용될 때 값이 할당되기 때문에 let은 사용할 수 없습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;구조체, 클래스에서 사용 가능&lt;/li&gt;
  &lt;li&gt;연산 프로퍼티에는 사용 불가
    &lt;ul&gt;
      &lt;li&gt;처음 사용 될 때, 메모리에 값을 올리고 이후에 사용 될 때는 메모리에 올린 값을 사용하기 때문에&lt;br /&gt;
사용할 때마다 연산이 되는 연산프로퍼티에서는 사용할 수 없습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클로저에서의 사용
    &lt;ul&gt;
      &lt;li&gt;클로저의 결과값으로 사용 될 때는 실행 이후 종료되기 때문에 메모리 누수의 걱정이 없지만&lt;/li&gt;
      &lt;li&gt;클로저 자체를 사용할 때는 클로저 리스트를 사용해 메모리 누수 방지를 해줘야 합니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>권지수</name><email>kjsii123@naver.com</email></author><category term="Swift" /><summary type="html">Lazy란 처음 사용되기전까지 연산이 되지 않습니다.</summary></entry><entry><title type="html">오토레이아웃의 우선순위</title><link href="https://sweetfood-dev.github.io/swift/4-autolayout-priority/" rel="alternate" type="text/html" title="오토레이아웃의 우선순위" /><published>2021-02-05T00:00:00+09:00</published><updated>2021-02-05T00:00:00+09:00</updated><id>https://sweetfood-dev.github.io/swift/4-autolayout-priority</id><content type="html" xml:base="https://sweetfood-dev.github.io/swift/4-autolayout-priority/">&lt;p&gt;&lt;strong&gt;constraint&lt;/strong&gt;의 priority&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;제약 사항간의 우선순위&lt;/li&gt;
  &lt;li&gt;뷰들의 크기가 유동적으로 변할 때, 제약들간에 충돌이 발생할 수 있다&lt;/li&gt;
  &lt;li&gt;이 때 우선순위를 결정함으로 충돌을 해결할 수 있다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>권지수</name><email>kjsii123@naver.com</email></author><category term="Swift" /><summary type="html">constraint의 priority 제약 사항간의 우선순위 뷰들의 크기가 유동적으로 변할 때, 제약들간에 충돌이 발생할 수 있다 이 때 우선순위를 결정함으로 충돌을 해결할 수 있다.</summary></entry><entry><title type="html">Frame과 Bounds</title><link href="https://sweetfood-dev.github.io/swift/3-frame-bounds/" rel="alternate" type="text/html" title="Frame과 Bounds" /><published>2021-02-05T00:00:00+09:00</published><updated>2021-02-05T00:00:00+09:00</updated><id>https://sweetfood-dev.github.io/swift/3-frame-bounds</id><content type="html" xml:base="https://sweetfood-dev.github.io/swift/3-frame-bounds/">&lt;p&gt;&lt;strong&gt;Frame&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;상위뷰 좌표 시스템 내에서 View의 위치와 크기&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Bounds&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;자기 자신의 좌표시스템에서의 (sub view들의)위치와 크기, 부모뷰와는 관계가 없다&lt;/li&gt;
  &lt;li&gt;default origin은 0,0이다&lt;/li&gt;
  &lt;li&gt;origin의 변경은 sub view들의 위치가 변경됨을 의미&lt;/li&gt;
  &lt;li&gt;sub view의 위치가 변한다는 것은 그려져야하는 위치가 달라지는 것이지 sub view들의 frame 값의 변화는 없다&lt;/li&gt;
  &lt;li&gt;스크롤 시 sub view들의 위치가 달라지는 것이 대표적인 예이다&lt;/li&gt;
&lt;/ul&gt;</content><author><name>권지수</name><email>kjsii123@naver.com</email></author><category term="Swift" /><summary type="html">Frame 상위뷰 좌표 시스템 내에서 View의 위치와 크기</summary></entry><entry><title type="html">as as? as!</title><link href="https://sweetfood-dev.github.io/swift/1-type-casting/" rel="alternate" type="text/html" title="as as? as!" /><published>2021-02-05T00:00:00+09:00</published><updated>2021-02-05T00:00:00+09:00</updated><id>https://sweetfood-dev.github.io/swift/1-type-casting</id><content type="html" xml:base="https://sweetfood-dev.github.io/swift/1-type-casting/">&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
      &lt;th&gt;실행 시점&lt;/th&gt;
      &lt;th&gt;캐스팅 종류&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;as&lt;/td&gt;
      &lt;td&gt;컴파일러가 타입 변환의 성공을 보장&lt;/td&gt;
      &lt;td&gt;컴파일 타임&lt;/td&gt;
      &lt;td&gt;업 캐스팅&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;as?&lt;/td&gt;
      &lt;td&gt;변환에 실패하는 경우 nil을 반환&lt;/td&gt;
      &lt;td&gt;런타임&lt;/td&gt;
      &lt;td&gt;다운 캐스팅&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;as!&lt;/td&gt;
      &lt;td&gt;변환에 실패하는 경우 런타임에러 발생&lt;/td&gt;
      &lt;td&gt;런타임&lt;/td&gt;
      &lt;td&gt;다운 캐스팅&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>권지수</name><email>kjsii123@naver.com</email></author><category term="Swift" /><summary type="html">  설명 실행 시점 캐스팅 종류 as 컴파일러가 타입 변환의 성공을 보장 컴파일 타임 업 캐스팅 as? 변환에 실패하는 경우 nil을 반환 런타임 다운 캐스팅 as! 변환에 실패하는 경우 런타임에러 발생 런타임 다운 캐스팅</summary></entry></feed>