<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://sweetfood-dev.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://sweetfood-dev.github.io/" rel="alternate" type="text/html" /><updated>2021-01-22T17:28:55+09:00</updated><id>https://sweetfood-dev.github.io/feed.xml</id><title type="html">공부 그리고 기록</title><subtitle>Swift / Algorithm</subtitle><author><name>권지수</name><email>kjsii123@naver.com</email></author><entry><title type="html">[백준 11726] 2 * n 타일링</title><link href="https://sweetfood-dev.github.io/algorithm/dp/11726-2-n/" rel="alternate" type="text/html" title="[백준 11726] 2 * n 타일링" /><published>2021-01-22T00:00:00+09:00</published><updated>2021-01-22T00:00:00+09:00</updated><id>https://sweetfood-dev.github.io/algorithm/dp/11726-2-n</id><content type="html" xml:base="https://sweetfood-dev.github.io/algorithm/dp/11726-2-n/">&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/11726&quot;&gt;링크&lt;/a&gt;
&lt;strong&gt;문제&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2×n 크기의 직사각형을 1×2, 2×1 타일로 채우는 방법의 수를 구하는 프로그램을 작성하시오.&lt;/p&gt;

&lt;p&gt;아래 그림은 2×5 크기의 직사각형을 채운 한 가지 방법의 예이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;입력&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;첫째 줄에 n이 주어진다. (1 ≤ n ≤ 1,000)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;출력&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;첫째 줄에 2×n 크기의 직사각형을 채우는 방법의 수를 10,007로 나눈 나머지를 출력한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;코드&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func solve(n : Int) {
	guard n &amp;gt; 2 else { return n }
	var arr = [Int](repeating: 0, count: n + 1)
	arr[1] = 1
	arr[2] = 2
	for i in 3 ... n {
		arr[i] = arr[i - 1] + arr[i - 2]
		arr[i] %= 10007
	}
	
	return arr[i]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;풀이 : 조금 더 이해가 되면 작성할 예정&lt;/p&gt;</content><author><name>권지수</name><email>kjsii123@naver.com</email></author><category term="Algorithm" /><category term="DP" /><summary type="html">링크 문제</summary></entry><entry><title type="html">동적계획법(DP) 이론</title><link href="https://sweetfood-dev.github.io/algorithm/dp/Algorithm-DP-%EC%9D%B4%EB%A1%A0/" rel="alternate" type="text/html" title="동적계획법(DP) 이론" /><published>2021-01-22T00:00:00+09:00</published><updated>2021-01-22T00:00:00+09:00</updated><id>https://sweetfood-dev.github.io/algorithm/dp/Algorithm-DP-%EC%9D%B4%EB%A1%A0</id><content type="html" xml:base="https://sweetfood-dev.github.io/algorithm/dp/Algorithm-DP-%EC%9D%B4%EB%A1%A0/">&lt;p&gt;&lt;strong&gt;동적계획법이란?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;최적화 문제를 연구하는 수학이론에서 왔다.&lt;/li&gt;
  &lt;li&gt;처음 주어진 문제를 더 작은 문제로 나눈 뒤 조각의 답을 계산하고 이러한 답들로 원래 문제에 대한 답을 계산, 도출&lt;/li&gt;
  &lt;li&gt;어떤 부분문제는 두개 이상의 문제를 푸는데 사용할 수 있어 한번만 계산하고 계산 결과를 &lt;strong&gt;재활용하여&lt;/strong&gt; 속도의 향상을 얻는다&lt;/li&gt;
  &lt;li&gt;계산한 값을 저장하는 곳을 &lt;strong&gt;캐시&lt;/strong&gt;라고 한다.&lt;/li&gt;
  &lt;li&gt;이러한 한번만 계산한 값을 재활용 하는 최적화 기법을 &lt;strong&gt;메모이제이션&lt;/strong&gt; 이라고 한다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>권지수</name><email>kjsii123@naver.com</email></author><category term="Algorithm" /><category term="DP" /><summary type="html">동적계획법이란?</summary></entry><entry><title type="html">[백준 1463] 1로 만들기</title><link href="https://sweetfood-dev.github.io/algorithm/dp/BOJ1463-DP/" rel="alternate" type="text/html" title="[백준 1463] 1로 만들기" /><published>2021-01-22T00:00:00+09:00</published><updated>2021-01-22T00:00:00+09:00</updated><id>https://sweetfood-dev.github.io/algorithm/dp/BOJ1463-DP</id><content type="html" xml:base="https://sweetfood-dev.github.io/algorithm/dp/BOJ1463-DP/">&lt;p&gt;&lt;a href=&quot;http://https://www.acmicpc.net/problem/1463&quot;&gt;링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;문제&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;X가 3으로 나누어 떨어지면, 3으로 나눈다.&lt;/li&gt;
  &lt;li&gt;X가 2로 나누어 떨어지면, 2로 나눈다.&lt;/li&gt;
  &lt;li&gt;1을 뺀다.
    &lt;blockquote&gt;
      &lt;p&gt;정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;입력&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;첫째 줄에 1보다 크거나 같고, 106보다 작거나 같은 정수 N이 주어진다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;출력&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;첫째 줄에 연산을 하는 횟수의 최솟값을 출력한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;시도 1 : 
메모이제이션을 사용한 재귀로 구현.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var cache = [Int](repeating: 0, count: 1000001)

func solve(x: Int) -&amp;gt; Int {
	guard x &amp;gt;= 1 else { return 0 }
	if x == 1 { return 1 }
	if cache[x] &amp;gt; 0 {
		return cache[x]
	}
	var minVal = Int.max
	minVal = min(solve(x: x - 1), minVal)
	if x % 3 == 0 { minVal = min(solve(x: x / 3), minVal) } 
	if x % 2 == 0 { minVal = min(solve(x: x / 2), minVal) }
	cache[x] = minVal + 1
	return minVal + 1
	}

if let x = Int(readLine()!) {
	print(solve(x: x) - 1)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;x가 10000 이하일때는 잘 동작했지만
그 이상이 되면 재귀의 깊이가 깊어져 런타임 에러 발생.&lt;/p&gt;

&lt;p&gt;고민고민을 해봤지만 고민만 1시간이 넘어가 결국 구글링…&lt;/p&gt;

&lt;p&gt;재귀가 아닌 상향식 DP를 사용하여 접근하는 방법이 많았다&lt;/p&gt;

&lt;p&gt;일련의 규칙이 있는데&lt;/p&gt;

&lt;p&gt;x == 1 ,  0  , 연산 필요 없음
x == 2 , &lt;strong&gt;( 2 / 2 )&lt;/strong&gt; = 1, 1번 연산
x == 3,  ( 3 / 3 ) = 1, 1번 연산
x == 4,  &lt;strong&gt;( 4 / 2 ) = 2, (2 / 2)&lt;/strong&gt; = 1, 총 2번 연산
x == 5 , ( 5 - 1 ) =  4 , &lt;strong&gt;( 4 / 2 ) = 2, ( 2 / 2 )&lt;/strong&gt; = 1, 총 3번 연산&lt;/p&gt;

&lt;p&gt;x 가 4 이상 일 때는 이 전의 결과를 포함하고 있다 .&lt;/p&gt;

&lt;p&gt;이를 코드로 나타내면&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
func solve(x: Int) -&amp;gt; Int {
    if x == 1 { return 0 }
    else if x == 2 { return 1 }
    else if x == 3 { return 1 }
    else{
        var cache = [Int](repeating: 0, count: x + 1)
        cache[1] = 0
        cache[2] = 1
        cache[3] = 1
        
        for i in 4 ... x {
            cache[i] = cache[i - 1] + 1
            if i % 3 == 0 {
                cache[i] = min(cache[i / 3] + 1, cache[i])
            }
            if i % 2 == 0 {
                cache[i] = min(cache[i / 2] + 1, cache[i])
            }
        }
        return cache[x]
    }
}
if let x = Int(readLine()!) {
    print(solve(x: x))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>권지수</name><email>kjsii123@naver.com</email></author><category term="Algorithm" /><category term="DP" /><summary type="html">링크</summary></entry><entry><title type="html">arc 공부해서 수정</title><link href="https://sweetfood-dev.github.io/ios/iOS-ARC-%EC%A0%95%EB%A6%AC/" rel="alternate" type="text/html" title="arc 공부해서 수정" /><published>2021-01-22T00:00:00+09:00</published><updated>2021-01-22T00:00:00+09:00</updated><id>https://sweetfood-dev.github.io/ios/iOS-ARC-%EC%A0%95%EB%A6%AC</id><content type="html" xml:base="https://sweetfood-dev.github.io/ios/iOS-ARC-%EC%A0%95%EB%A6%AC/">&lt;p&gt;ㅇㅇ&lt;/p&gt;</content><author><name>권지수</name><email>kjsii123@naver.com</email></author><category term="iOS" /><summary type="html">ㅇㅇ</summary></entry></feed>