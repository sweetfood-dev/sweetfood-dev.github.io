I"v<p><strong>왜 아키텍처를 사용해야하지?</strong><br /></p>

<p>개발을 하다보면 디버깅을 해야하는 상황이 필연적으로 찾아온다<br />
이 때 프로젝트의 몸집이 크다면 디버깅을 하는데 있어 어려움을 겪게 될 것이다<br />
구조적으로 잘 정의된 프로젝트는 디버깅을 쉽게 해주며, 개발자간의 의사소통, 유지보수에도 도움이 된다!<br /></p>

<ol>
  <li>좋은 아키텍쳐의 특징
    <ul>
      <li>객체간 <strong>책임 분리</strong>가 균형있게 잡혀 있고 명확하게 이루어저야 한다.</li>
      <li><strong>테스트</strong>가 용이해야 한다</li>
      <li><strong>사용이 용이</strong>해야 한다. 즉 유지 보수가 쉬워야 한다.</li>
    </ul>
  </li>
</ol>

<ul>
  <li>책임 분리는 왜 이루어 저야 할까?
로직을 쉽게, 단순하게 한눈에 볼 수 있다<br />
즉, 복잡함을 극복하는 방법은 <strong>단일책임 원칙</strong>으로 책임을 나누는 것이다!<br /></li>
  <li>왜 테스트가 가능해야 할까?
런타임 내에서 이슈를 찾는것을 도와준다<br />
실사용자가 이슈를 접한다면 그 이슈를 수정하는데 오랜 시간이 걸리니까, 미연에 방지해야한다!<br /></li>
  <li>사용의 용이
단순하다. <strong>유지보수</strong>가 용이하니까!<br /></li>
</ul>
:ET