I"#<h1 id="문제">문제</h1>
<p><a href="https://www.acmicpc.net/problem/9095">링크</a></p>

<p>정수 4를 1, 2, 3의 합으로 나타내는 방법은 총 7가지가 있다. 합을 나타낼 때는 수를 1개 이상 사용해야 한다.</p>

<ul>
  <li>1+1+1+1</li>
  <li>1+1+2</li>
  <li>1+2+1</li>
  <li>2+1+1</li>
  <li>2+2</li>
  <li>1+3</li>
  <li>3+1</li>
</ul>

<p><strong>정수 n이 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법의 수를 구하는 프로그램을 작성하시오.</strong></p>

<h2 id="입력">입력</h2>
<blockquote>
  <p>첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고, 정수 n이 주어진다. n은 양수이며 11보다 작다.</p>
</blockquote>

<h2 id="출력">출력</h2>
<blockquote>
  <p>각 테스트 케이스마다, n을 1, 2, 3의 합으로 나타내는 방법의 수를 출력한다.</p>
</blockquote>

<h2 id="풀이-">풀이 :</h2>
<p>1~3의 합으로 정수 N을 나타내는 경우의 수만 구하면된다,  구성은 상관없다는 소리.</p>

<p>N == 1 일 때 경우의 수 : <br />
<strong>1</strong><br />
N == 2 일 때 경우의 수 : <br />
<strong>1 + 1</strong><br />
<strong>2</strong><br />
N == 3 일 때 경우의 수 : <br />
<strong>1 + 1 + 1</strong><br />
<strong>1 + 2</strong><br />
<strong>2 + 1</strong><br />
<strong>3</strong><br />
 일 때, <br /></p>

<p>N == 4는 다음과 같다<br />
 N == 4 : <br />
 <strong>1 + 1 + 1</strong> + 1 :     3의 경우의 수 + 1 <br />
 <strong>1 + 1</strong> + 2 :             2의 경우의 수 + 2<br />
 <strong>1 + 2</strong>+ 1 :             3의 경우의 수 + 1<br />
 <strong>2 + 1</strong> + 1 :             3의 경우의 수 + 1<br />
 <strong>2</strong> + 2 :                     2의 경우의 수 + 2<br />
 <strong>1</strong> + 3 :                     1의 경우의 수 + 3<br />
 <strong>3</strong> + 1 :                     3의 경우의 수 + 1<br /></p>

<p>1의 경우의 수 + 2의 경우의 수 + 3의 경우의 수 의 합과 같다.
 수식으로 표현하면 N = (N - 3) + (N - 2) + (N - 1) 이므로 이를 그대로 사용!</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">func</span> <span class="nf">solve</span><span class="p">(</span><span class="nv">n</span> <span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span><span class="p">{</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">0</span> <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">3</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">4</span> <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">2</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">2</span> <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span> <span class="p">}</span>
    <span class="k">var</span> <span class="nv">arr</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">](</span><span class="nv">repeating</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">arr</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
    <span class="n">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">4</span> <span class="o">...</span> <span class="n">n</span> <span class="p">{</span>
        <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">arr</span><span class="p">[</span><span class="n">n</span><span class="p">]</span>
<span class="p">}</span>

<span class="k">var</span> <span class="nv">map</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">:</span><span class="kt">Int</span><span class="p">]()</span>
<span class="n">map</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">map</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">map</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">map</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>
<span class="kd">func</span> <span class="nf">recursive</span><span class="p">(</span><span class="nv">n</span> <span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">if</span> <span class="k">let</span> <span class="nv">res</span> <span class="o">=</span> <span class="n">map</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">res</span>
    <span class="p">}</span>
    
    <span class="n">map</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="nf">recursive</span><span class="p">(</span><span class="nv">n</span><span class="p">:</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="nf">recursive</span><span class="p">(</span><span class="nv">n</span><span class="p">:</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="nf">recursive</span><span class="p">(</span><span class="nv">n</span><span class="p">:</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">map</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">!</span>
<span class="p">}</span>
<span class="k">if</span> <span class="k">let</span> <span class="nv">count</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="nf">readLine</span><span class="p">()</span><span class="o">!</span><span class="p">){</span>
    
    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">0</span> <span class="o">..&lt;</span> <span class="n">count</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">n</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="nf">readLine</span><span class="p">()</span><span class="o">!</span><span class="p">)</span><span class="o">!</span>
        <span class="c1">// 상향식</span>
        <span class="cm">/*print(solve(n: n))*/</span>
        <span class="c1">// 하향식</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">recursive</span><span class="p">(</span><span class="nv">n</span><span class="p">:</span> <span class="n">n</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>상향식과 하향식 모두 가능!</p>
:ET